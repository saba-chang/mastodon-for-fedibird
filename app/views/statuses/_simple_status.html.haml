:ruby
  hide_show_thread ||= false
  has_reference    = (current_account.nil? || current_account&.user&.setting_enable_status_reference) && status.status_references_count - (status.quote? ? 1 : 0) > 0
  has_ancestor     = has_reference || !hide_show_thread && (current_account.nil? || current_account&.user&.setting_show_reply_tree_button) && status.reply?
  has_descendant   = !hide_show_thread && (current_account.nil? || current_account&.user&.setting_show_reply_tree_button) && status.replies_count > 0
  thread_mark_type = (has_ancestor && has_descendant) ? 'both' : (has_ancestor ? 'ancestor' : (has_descendant ? 'descendant' : ''))
  enable_reaction  = current_account.nil? || current_account&.user&.setting_enable_reaction
  compact_reaction = !hide_show_thread && !current_account.nil? && current_account&.user&.setting_compact_reaction

.status{ class: "status-#{status.visibility}" }
  .status__info
    = link_to ActivityPub::TagManager.instance.url_for(status), class: 'status__relative-time u-url u-uid', target: stream_link_target, rel: 'noopener noreferrer' do
      - if thread_mark_type.present?
        %span.status__thread_mark{ class: "status__thread_mark-#{thread_mark_type}", title: t(thread_mark_type, scope: 'thread_mark') }
          = '+'
      %time.time-ago{ datetime: status.created_at.iso8601, title: l(status.created_at) }= l(status.created_at)
    %data.dt-published{ value: status.created_at.to_time.iso8601 }
    %span.status__visibility-icon><
      = visibility_icon status

    .p-author.h-card
      = link_to ActivityPub::TagManager.instance.url_for(status.account), class: 'status__display-name u-url', target: stream_link_target, rel: 'noopener noreferrer' do
        .status__avatar{ account_cat_params(status.account) }
          - if prefers_autoplay?
            = image_tag status.account.avatar_original_url, alt: '', class: 'u-photo account__avatar'
          - else
            = image_tag status.account.avatar_static_url, alt: '', class: 'u-photo account__avatar'
        %span.display-name
          %bdi
            %strong.display-name__html.p-name.emojify= display_name(status.account, custom_emojify: true, autoplay: prefers_autoplay?)
          = ' '
          %span.display-name__account
            = acct(status.account)
            = fa_icon('lock') if status.account.locked?
  .status__content.emojify{ :data => ({ spoiler: current_account&.user&.setting_expand_spoilers ? 'expanded' : 'folded' } if status.spoiler_text?) }<
    - if status.spoiler_text?
      %p<
        %span.p-summary> #{Formatter.instance.format_spoiler(status, autoplay: prefers_autoplay?)}&nbsp;
        %button.status__content__spoiler-link= t('statuses.show_more')
    .e-content
      = Formatter.instance.format(status, custom_emojify: true, autoplay: prefers_autoplay?)
      - if status.preloadable_poll
        = render_poll_component(status)

  - if status.quote?
    = render partial: "statuses/quote_status", locals: {status: status.quote}

  - if !status.media_attachments.empty?
    - if status.media_attachments.first.video?
      = render_video_component(status, width: 610, height: 343)
    - elsif status.media_attachments.first.audio?
      = render_audio_component(status, width: 610, height: 343)
    - else
      = render_media_gallery_component(status, height: 343)
  - elsif status.preview_card
    = render_card_component(status)

  - if !status.in_reply_to_id.nil? && status.in_reply_to_account_id == status.account.id && !hide_show_thread
    = link_to ActivityPub::TagManager.instance.url_for(status), class: 'status__content__read-more-button', target: stream_link_target, rel: 'noopener noreferrer' do
      = t 'statuses.show_thread'

  - if enable_reaction && !compact_reaction && status.emoji_reaction?
    .reactions-bar.emoji-reactions-bar
      = render partial: 'statuses/reaction_item', collection: status.grouped_emoji_reactions(current_account), as: :reaction_item

  .status__action-bar
    = link_to remote_interaction_path(status, type: :reply), class: 'status__action-bar-button icon-button icon-button--with-counter modal-button' do
      - if status.in_reply_to_id.nil?
        = fa_icon 'reply fw'
      - else
        = fa_icon 'reply-all fw'
      %span.icon-button__counter= obscured_counter status.replies_count
    = link_to remote_interaction_path(status, type: :reblog), class: 'status__action-bar-button icon-button modal-button' do
      - if status.distributable?
        = fa_icon 'retweet fw'
      - elsif status.private_visibility? || status.limited_visibility?
        = fa_icon 'lock fw'
      - else
        = fa_icon 'envelope fw'
    = link_to remote_interaction_path(status, type: :favourite), class: 'status__action-bar-button icon-button modal-button' do
      = fa_icon 'star fw'
    - if enable_reaction && compact_reaction && status.emoji_reaction?
      .status__action-bar-button.icon-button.icon-button--with-counter.disabled
        = fa_icon 'smile-o'
        %span.icon-button__counter= obscured_counter status.emoji_reactions_count
